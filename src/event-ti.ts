/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const EventType = t.union(t.lit('in'), t.lit('out'));

export const IncomingEventName = t.lit('ack');

export const OutgoingEventName = t.union(t.lit('ack'), t.lit('init'));

export const EventName = t.union("IncomingEventName", "OutgoingEventName");

export const JSONValue = t.union("string", "number", "boolean", t.iface([], {
  [t.indexKey]: "JSONValue",
}), t.array("JSONValue"));

export const IEventPayload = t.iface([], {
  "data": "JSONValue",
  "ackToken": "string",
});

export const IEvent = t.iface([], {
  "type": "EventType",
  "name": "EventName",
  "payload": "IEventPayload",
  "format": "IValidatableProperties",
});

export const IncomingPayload = t.iface(["IEventPayload"], {
  "authToken": "string",
});

export const IncomingEvent = t.iface(["IEvent"], {
  "type": t.lit('in'),
  "payload": "IncomingPayload",
});

export const OutgoingEvent = t.iface(["IEvent"], {
  "type": t.lit('out'),
});

export const BaseEvent = t.union("IncomingEvent", "OutgoingEvent");

const exportedTypeSuite: t.ITypeSuite = {
  EventType,
  IncomingEventName,
  OutgoingEventName,
  EventName,
  JSONValue,
  IEventPayload,
  IEvent,
  IncomingPayload,
  IncomingEvent,
  OutgoingEvent,
  BaseEvent,
};
export default exportedTypeSuite;
